# Generated by sila2.code_generator; sila2.__version__: 0.10.4
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterable, Optional

    from agarcontroller_types import (
        CallSubroutine_Responses,
        IdentifyColony_Responses,
        ResetTipCount_Responses,
        RingLightLamp_Responses,
        RingLightMotor_Responses,
        RobotControlStartProcess_Responses,
    )
    from sila2.client import ClientMetadataInstance, ClientUnobservableProperty


class AgarControllerClient:
    """
    Agar Streaking SiLA2 compatible controller
    """

    GetTipCount: ClientUnobservableProperty[int]
    """
    Get remaining tips in the tip station
    """

    CaptureColony: ClientUnobservableProperty[str]
    """
    Capturing detections of possible colonies
    """

    def RingLightLamp(
        self, OnOff: bool, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> RingLightLamp_Responses:
        """
        Turn On/Off Ring Light
        """
        ...

    def RingLightMotor(
        self, OnOff: bool, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> RingLightMotor_Responses:
        """
        Open/Close Ring Light Motor
        """
        ...

    def ResetTipCount(
        self, TipCount: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ResetTipCount_Responses:
        """
        Resetting Tip Count of Tip-Station
        """
        ...

    def CallSubroutine(
        self, Routine: str, Arg1: str, Arg2: str, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> CallSubroutine_Responses:
        """
        Call Subroutine
        """
        ...

    def RobotControlStartProcess(
        self,
        OutputType: str,
        StreakingType: str,
        TransferType: str,
        Coordinates: str,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> RobotControlStartProcess_Responses:
        """
        Start Process to Control Robot
        """
        ...

    def IdentifyColony(
        self, ColonyValue: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> IdentifyColony_Responses:
        """
        Identify Selected Reference Colony
        """
        ...
